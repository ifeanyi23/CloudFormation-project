Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    BucketName:
        Description: The bucket containing static website files
        Type: String
        Default: my-670213391116-bucket
    MinCapacity:
        Type: String
        Default: "2"

    MaxCapacity:
        Type: String
        Default: "4"

    DesiredCapacity:
        Type: String
        Default: "2"

    CPUPolicyTargetValue:
        Type: Number
        Default: 40

    JumpboxKeyName:
        Type: String
        Default: "jumpboxKey"
Resources:
    LoadBalancerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http into our load balancer
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

    JumpboxSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId:
          Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
        GroupDescription: Allow SSH from anywhere
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our hosts and SSH from Jumpbox servers
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              SourceSecurityGroupId: !Ref LoadBalancerSecGroup
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              SourceSecurityGroupId: !Ref JumpboxSecurityGroup
          SecurityGroupEgress: 
            - IpProtocol: -1
              FromPort: -1
              ToPort: -1
              CidrIp: 0.0.0.0/0
    EC2S3IAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Principal:
                  Service:
                    - "ec2.amazonaws.com"
                Action:
                  - "sts:AssumeRole"
    S3AccessPolicy:
        Type: AWS::IAM::Policy
        Properties:
          PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${BucketName}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource: !Sub "arn:aws:s3:::${BucketName}"
          Roles:
            - !Ref EC2S3IAMRole
    WebServerInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties: 
          Roles:
            - !Ref EC2S3IAMRole
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              apt-get update -y
              apt-get install apache2 -y
              systemctl start apache2.service
              cd /var/www/html
              apt install awscli
              aws s3 sync s3://${BucketName} /var/www/html       
          # ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
          ImageId: ami-061dbd1209944525c
          
          SecurityGroups:
            - Ref: WebServerSecGroup
          IamInstanceProfile: !Ref WebServerInstanceProfile
          InstanceType: t3.small
          BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          VPCZoneIdentifier:
          - Fn::ImportValue: 
              !Sub "${EnvironmentName}-PRIV-NETS"
          LaunchConfigurationName:
            Ref: WebAppLaunchConfig
          MinSize: !Ref MinCapacity
          MaxSize: !Ref MaxCapacity
          DesiredCapacity: !Ref DesiredCapacity
          TargetGroupARNs:
            - Ref: WebAppTargetGroup
    WebAppCPUScalingPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
          AutoScalingGroupName: !Ref WebAppGroup
          PolicyType: TargetTrackingScaling
          TargetTrackingConfiguration:
            PredefinedMetricSpecification:
              PredefinedMetricType: ASGAverageCPUUtilization
            TargetValue: !Ref CPUPolicyTargetValue
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckEnabled: true
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
            Fn::ImportValue:
              Fn::Sub: "${EnvironmentName}-VPCID"
    WebAppLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Subnets:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC-SUBNET-1"
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC-SUBNET-2"
          SecurityGroups:
          - Ref: LoadBalancerSecGroup
    WebAppLoadBalancerListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
          LoadBalancerArn:
            Ref: WebAppLoadBalancer
          Port: 80
          Protocol: HTTP
    WebAppLoadBalancerListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
            - Type: forward
              TargetGroupArn: !Ref WebAppTargetGroup
          Conditions:
            - Field: path-pattern
              Values:
                - "/*"
          ListenerArn: !Ref WebAppLoadBalancerListener
          Priority: 1
    Jumpbox1:
        Type: AWS::EC2::Instance
        Properties:
          InstanceType: t2.micro
          ImageId: ami-0b5eea76982371e91
          KeyName: !Ref JumpboxKeyName
          SecurityGroupIds:
            - !Ref JumpboxSecurityGroup
          SubnetId:
            Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC-SUBNET-1"
          Tags:
            - Key: Name
              Value: !Sub "${EnvironmentName}-Jumpbox-1"
    Jumpbox2:
        Type: AWS::EC2::Instance
        Properties:
          InstanceType: t2.micro
          ImageId: ami-0b5eea76982371e91
          KeyName: !Ref JumpboxKeyName
          SecurityGroupIds:
            - !Ref JumpboxSecurityGroup
          SubnetId:
            Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC-SUBNET-2"
          Tags:
            - Key: Name
              Value: !Sub "${EnvironmentName}-Jumpbox-2"
      
Outputs: 
    WebAppLoadBalancerDNSName: 
        Description: DNS Name of the web application
        Value: !Join
          - ""
          - - "http://"
            - !GetAtt WebAppLoadBalancer.DNSName
        Export:
          Name: !Sub ${EnvironmentName}-ELB-DNS-Name
  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.

# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html
